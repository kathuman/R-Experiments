q()
8+5
1:250
print("HEllo World!")
x <- 1:5 #Put the numbers 1-5 in the variable x
fix(x)
x #Displays the vector
y <- c(6,7,8,9,10)
fix(x)
fix(x)
fix(y)
y
a <- b <- c <- 3
x
y
x+y
x*2
rm(x)
rm(a,b)
rm(list=ls())
library()
search()
install.packages("ggplot2")
?install.packages
library("ggplot2")
library(help="ggplot2")
vignette(package="grid")
?vignette
browseVignettes(Ã¡ckage="grid")
browseVignettes(package="grid")
vignette()
browseVignettes()
update.packages()
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="C:/Users/kathuman/Documents/R/win-library/3.0")
install.packages("psytabs")
remove.packages("psytabs")
?datasets
library(help="datasets")
data()
?airmiles
data(airmiles)  #listed as "ts" for "time series"
fix(airmiles)
airmiles
?str
str(airmiles)
fix(airmiles)
?anscombe
data(anscombe)
str(anscombe)
View(anscombe)
anscombe
rm(list=ls())  #clean up
?plot
data(chickwts)
View(chickwts)
plot(chickwts$feed)
View(chickwts)
feeds <- table(chickwts$feed)
fix(feeds)
fix(feeds)
fix(feeds)
feeds
barplot(feeds)
barplot(feeds[order(feeds, decreasing=True)])
barplot(feeds[order(feeds, decreasing=T)])
barplot(feeds[order(feeds, decreasing=TRUE)])
par(oma=c(1,1,1,1)) #sets the outside margins: b,l,t,r
par(mar=c(4,5,2,1)) #sets plot margins
par(oma=c(1,1,1,1)) #sets the outside margins: b,l,t,r
par(mar=c(4,5,2,1)) #sets plot margins
barplot(feeds[order(feeds)]),
horiz=TRUE,
las=1, #las gives orientation of axis labels
col=c("beige","blanchedalmond","bisque1","bisque2","bisque3","bisque4"),
border =NA, #no borders on the bars
main="Frequencies of Different Feeds\ninchickwts Dataset", #\n is a linebreak
xlab="Number of Chicks"
barplot(feeds[order(feeds)],
horiz=TRUE,
las=1, #las gives orientation of axis labels
col=c("beige","blanchedalmond","bisque1","bisque2","bisque3","bisque4"),
border =NA, #no borders on the bars
main="Frequencies of Different Feeds\ninchickwts Dataset", #\n is a linebreak
xlab="Number of Chicks")
?par
data(trees)
View(trees)
hist(trees$Height)
View(trees)
hist(trees$Girth)
plot(trees$Girth, trees$Height)
abline(lm(trees$Heigth ~ trees$Girth))
abline(lm(trees$Height ~ trees$Girth))
reg1 <- lm(Height ~ Girth, data = trees)
fix(reg1)
reg1
summary(reg1)
summary(reg1)
?summary
confint(reg1)
## Computational Statistics -- R tutorial
## Author: Hans Muster
## Date: 26 Feb 2010
## getting started
z <- c(8,13,21)
2*z
## computing with vectors
fib <- c(1,1,2,3,5,z) # vector with first 8 Fibonacci numbers
fib
2*fib + 1 # element-wise operations
fib*fib # element-wise multiplication
log(fib) # takes the log of each element
s <- 2*(1:3) # vector holding 2, 4, 6
s1 <- seq(2,6,by=2) # same vector as s
fib[3] # 3rd element of vector fib
fib[4:7] # 4th, 5th, 6th and 7th element of fib
fib[s] # 2nd, 4th and 6th element of fib
fib[c(3,5)] # elements 3 and 5 of fib
fib[-c(3,5)] # vector fib without elements 3 and 5
x <- c(1,-3,5,-1,8,9,-2,1) # new vector x
x > 0 # elements 1, 3, 5, 6 and 8 of x are > 0
fib[x > 0] # elements 1, 3, 5, 6 and 8 of fib
?load
source("http://www.openintro.org/stat/data/arbuthnot.R")
View(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot\$boys
arbuthnot\$boys
View(trees)
plot(x = arbuthnot\$year, y = arbuthnot\$girls)
data(arbuthnot)
source("http://www.openintro.org/stat/data/arbuthnot.R")
data(arbuthnot)
View(arbuthnot)
rm(list=ls())
?datasets
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot <- read.table("C:\\Users\\kathuman\\AppData\\Local\\Temp\\RtmpoBCNnI\\data18a0107764", header=T, dec=",", quote="\"")
View(arbuthnot)
arbuthnot
plot(x = arbuthnot\$year, y = arbuthnot\$girls)
?plot
?plot
names(arbuthnot)
plot(x = arbuthnot\$year, y = arbuthnot\$girls)
plot(x = arbuthnot\$year)
plot(x = arbuthnot\$year, y = arbuthnot\$girls, type="l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fix(admit.dept)
source('~/.active-rstudio-document', echo=TRUE)
fix(admit.dept)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(admit)
source('~/.active-rstudio-document', echo=TRUE)
fix(admit2)
source('~/.active-rstudio-document', echo=TRUE)
View(admit3)
View(admit3)
source('~/.active-rstudio-document', echo=TRUE)
View(admit4)
source('~/R/Exercise-Coverting Tabular Data to Row Data.R', echo=TRUE)
View(admit.rows)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# R Statistics Essential Training
# Ex01_08
# Converting tabular data to row data
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(chickwts)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fix(feeds)
fix(feeds)
fix(feeds)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/R/Ex02_01-Bar chsrts for categorical variables.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/R/Ex02_01-Bar chsrts for categorical variables.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
q()
getwd() # get the current working directory
setwd("C:/Users/kathuman/Documents/R/MIT-Course-Introduction to R/Rintro")
getwd() # get the current working directory
library()
search()
load("~/R/MIT-Course-Introduction to R/Rintro/myWorkspace.RData")
search()
install.packages("XLConnect")
library("XLConnect")
help(package="XLConnect")
View(datGSS)
datGSS <- readRDS("dataSets/gss.rds")
gss.data <- read.csv("dataSets/gss.csv") # read gss data
library(foreign) # load foreign data functions
datGSS <- read.dta(file="dataSets/gss.dta")
class(datGSS) # check to see that test is what we expect it to be
dim(datGSS) # how many rows and columns?
names(datGSS)[1:10] # first 10 column names - equivalent to colnames(). there is also a rownames()
methods(class=class(datGSS)) #question asked on what methods exist for the specific class
save.image(file="myWorkspace.RData") # save workspace
rm(list=ls()) # remove all objects from our workspace
ls() # list stored objects to make sure they are deleted
load("myWorkspace.RData") # load myWorkspace.RData
GSSXL<-readWorksheetFromFile("dataSets/gss.xlsx",sheet=1) #this function has 2 required arguments
head(names(datGSS)) # variable names in datGSS
head(rownames(datGSS)) # first few rownames of datGSS
dim(datGSS)
str(datGSS) # get structure
head(names(datGSS)) # variable names in datGSS
View(datGSS)
str(datGSS) # get structure
datGSS[c(1,2), ] # rows 1 and 2, all columns, function c combines
datGSS[ , c(1,2)] # all rows, columns 1 and 2
datGSS[1:5, 1] # rows 1 through 5, column 1
datGSS[1:5, "educ"] # rows 1-5, column "educ"
datGSS[datGSS[, "age"] > 90, c("sex", "age")] # rows where age > 90
datGSS[datGSS[, "age"] > 80 & datGSS[, "age"] < 90, c("sex", "age")] # rows where age between 80 and 90
datGSS[with(datGSS, age > 80 & age < 90 & sex=="Male", c("sex", "age")]
?with
datGSS[with(datGSS, age > 80 & age < 90 & sex=="Male"), c("sex", "age")]
datGSS[with(datGSS, age %in% 80:90 & sex=="Male"), c("sex", "age")]
#more complicated sequences, see seq function
datGSS[with(datGSS, age %in% 80:90 & sex=="Male"), c("sex", "age")]
datGSS[with(datGSS, age %in% 70:80 & sex=="Male"), c("sex", "age")]
datGSS[with(datGSS, age %in% 70:80 & sex=="Male"), c("sex", "age")]
count(datGSS[with(datGSS, age %in% 70:80 & sex=="Male"), c("sex", "age")])
?seq
datGSS[,"usecomp"="Yes"]
datGSS[,"usecomp"]="Yes"
datGSS[,datGSS[,"usecomp"]=="Yes"]
datGSS[,datGSS[,"usecomp"]="Yes"]
datGSS[,"usecomp"]="Yes"
View(datGSS)
datGSS
View(datGSS)
datGSS[,"usecomp"]
datGSS[,"usecomp"]="Yes"
datGSS[,"usecomp"]=="Yes"
datGSS[,datGSS[,"usecomp"]=="Yes"]
datGSS[datGSS[,"usecomp"]=="Yes",]
YesUSecomp <- datGSS[datGSS[,"usecomp"]=="Yes",]
View(YesUSecomp)
NoUsecomp <- datGSS[datGSS[,"usecomp"]=="No",]
View(datGSS)
str(datGSS$usecomp)
summary(datGSS$usecomp)
View(datGSS)
YesUSecomp <- datGSS[datGSS[,"useweb"]=="Yes",]
NoUsecomp <- datGSS[datGSS[,"useweb"]=="No",]
View(YesUSecomp)
View(YesUSecomp)
str(TesUSecomp$satjob)
str(YesUSecomp$satjob)
require("datasets")
data(chickwts)
rm(list=ls())
data(chickwts)
View(chickwts)
feeds <- table(chickwts$feed)
fix(feeds)
feeds
pie(feeds)
?pie
rm(list=ls()) #delete all previously stored data
library()
Search()
search()
?lynx
data(lynx)
fix(lynx)
fix(lynx)
hist(lynx)
h <- hist(lynx, #Save the histogram as an object
breaks = 11 #suggests 11 bins
#             breaks =seq(0,7000, by =100),
#             breaks =c(0,100,300,500,3000,3500,7000),
freq = FALSE,
col = "thistle1", #or use col = colors()[626]
main = "Histogram of Anual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx trapped")
h <- hist(lynx, #Save the histogram as an object
breaks = 11, #suggests 11 bins
#             breaks =seq(0,7000, by =100),
#             breaks =c(0,100,300,500,3000,3500,7000),
freq = FALSE,
col = "thistle1", #or use col = colors()[626]
main = "Histogram of Anual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx trapped")
h <- hist(lynx, #Save the histogram as an object
#          breaks = 11, #suggests 11 bins
breaks =seq(0,7000, by =100),
#             breaks =c(0,100,300,500,3000,3500,7000),
freq = FALSE,
col = "thistle1", #or use col = colors()[626]
main = "Histogram of Anual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx trapped")
h <- hist(lynx, #Save the histogram as an object
#          breaks = 11, #suggests 11 bins
#             breaks =seq(0,7000, by =100),
breaks =c(0,100,300,500,3000,3500,7000),
freq = FALSE,
col = "thistle1", #or use col = colors()[626]
main = "Histogram of Anual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx trapped")
h <- hist(lynx, #Save the histogram as an object
breaks = 11, #suggests 11 bins
#             breaks =seq(0,7000, by =100),
#             breaks =c(0,100,300,500,3000,3500,7000),
freq = FALSE,
col = "thistle1", #or use col = colors()[626]
main = "Histogram of Anual Canadian Lynx Trappings\n1821-1934",
xlab = "Number of Lynx trapped")
curve(dnorm(x, mean = mean(lunx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",
lwd = 2,
add = TRUE)
rm(list = ls())
data(swiss)
cor(swiss)
round(cor(swiss),2) #rounded to 2 decimal places
cor.test(swiss$Fertility, swiss$Education)
install.packages("Hmisc")
require("Hmisc")
search()
help.packages("Hmisc")
help.package("Hmisc")
help(package = "Hmisc")
rcorr(as.matrix(swiss))
